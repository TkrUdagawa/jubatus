def options(opt):
  pass

def configure(conf):
  pass

def build(bld):
  source = [
      'classifier.cpp',
      'regression.cpp',
      'recommender.cpp',
      'stat.cpp',
      'anomaly.cpp',
      'graph.cpp',
      'clustering.cpp',
      'cluster_analysis.cpp',
      'linear_function_mixer.cpp',
      'mixable_weight_manager.cpp',
      ]

  bld.shlib(
    source = source,
    target = 'jubatus_driver',
    includes = '.',
    use = 'PFICOMMON jubacommon jubatus_framework MSGPACK LIBGLOG jubaconverter jubastorage jubamixer jubatus_classifier jubatus_regression jubatus_recommender jubatus_stat jubatus_anomaly jubatus_graph jubatus_clustering jubatus_cluster_analysis'
    )

  def make_test(t):
    bld.program(
      features='gtest',
      source=t + '.cpp',
      target=t,
      includes='.',
      use='jubatus_driver'
      )

  tests = [
    'linear_function_mixer_test'
    ]

  for t in tests:
    make_test(t)

  bld.install_files('${PREFIX}/include/jubatus/driver', [
      'classifier.hpp',
      'regression.hpp',
      'recommender.hpp',
      'stat.hpp',
      'anomaly.hpp',
      'graph.hpp',
      'clustering.hpp',
      'cluster_analysis.hpp'
      ])
