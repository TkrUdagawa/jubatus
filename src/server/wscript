idls = ['classifier.idl', 'regression.idl', 'recommender.idl', 'stat.idl', 'graph.idl', 'anomaly.idl', 'clustering.idl']

def options(opt):
  pass

def configure(conf):
  if conf.env.HAVE_ZOOKEEPER_H:
    conf.check_cxx(msg = 'Checking for compiler TLS extension support',
                   fragment='__thread int i; int main() { return 0; }',
                   errmsg = 'no (Jubatus officially support GCC 4.4 or later)')


def build_one(bld, name, libraries = '', sources = ''):
  __sources = '%s_impl.cpp %s_serv.cpp ' % (name, name)
  __sources += sources

  bld.program(
    source = __sources,
    target = 'juba'+name,
    includes = '.',
    use = 'jubatus_framework jubacommon_mprpc jubatus_driver jubatus_%s %s JUBATUS_MPIO JUBATUS_MSGPACK-RPC MSGPACK' % (name, libraries)
    )
  if bld.env.HAVE_ZOOKEEPER_H:
    bld.program(
      source = '%s_keeper.cpp ' % name,
      target = 'juba%s_keeper' % name,
      includes = '.',
      use = 'PFICOMMON jubatus_framework jubacommon_mprpc JUBATUS_MPIO JUBATUS_MSGPACK-RPC MSGPACK'
      )
  bld.program(
    features = 'gtest',
    source = '%s_test.cpp' % name,
    target = '%s_test' % name,
    includes = '.',
    use = 'PFICOMMON MSGPACK jubacommon_mprpc %s' % libraries,
    )


def build(bld):
  #new classifier
  build_one(bld, "classifier", 'jubaconverter jubastorage')

  # #new regression
  build_one(bld, "regression", 'jubaconverter jubastorage')

  # #new recommender
  build_one(bld, "recommender", 'jubaconverter jubastorage')

  # #new anomaly
  build_one(bld, "anomaly", 'jubaconverter jubastorage jubatus_recommender' )

  build_one(bld, "stat")

  build_one(bld, "graph")

  build_one(bld, "clustering", 'jubaserver')
  build_one(bld, "cluster_analysis", 'jubaserver')

  n = bld.path.get_bld().make_node('test_input')
  n.mkdir()
  bld(rule = 'cp ${SRC} ${TGT}',
      source = bld.path.ant_glob('test_input/*'),
      target = n)

  bld.install_files('${PREFIX}/share/jubatus/idl/', idls)
